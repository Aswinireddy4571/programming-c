#include <iostream>

class Vector {
private:
    double x, y, z;

public:
    Vector(double x, double y, double z) : x(x), y(y), z(z) {}

    // Overload the + operator
    Vector operator+(const Vector& other) const {
        return Vector(x + other.x, y + other.y, z + other.z);
    }

    // Overload the - operator
    Vector operator-(const Vector& other) const {
        return Vector(x - other.x, y - other.y, z - other.z);
    }

    // Overload the * operator
    Vector operator*(double scalar) const {
        return Vector(x * scalar, y * scalar, z * scalar);
    }

    // Overload the / operator
    Vector operator/(double scalar) const {
        return Vector(x / scalar, y / scalar, z / scalar);
    }

    // Overload the << operator to output the vector in the format "(x, y, z)"
    friend std::ostream& operator<<(std::ostream& os, const Vector& v) {
        os << "(" << v.x << ", " << v.y << ", " << v.z << ")";
        return os;
    }
};

int main() {
    Vector v1(1, 2, 3);
    Vector v2(4, 5, 6);

    std::cout << "v1 = " << v1 << std::endl;
    std::cout << "v2 = " << v2 << std::endl;

    Vector v3 = v1 + v2;
    std::cout << "v1 + v2 = " << v3 << std::endl;

    Vector v4 = v2 - v1;
    std::cout << "v2 - v1 = " << v4 << std::endl;

    Vector v5 = v1 * 2;
    std::cout << "v1 * 2 = " << v5 << std::endl;

    Vector v6 = v2 / 2;
    std::cout << "v2 / 2 = " << v6 << std::endl;

    return 0;
}
